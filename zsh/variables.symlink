###############
### Exports ###
###############

export DOTFILES="$HOME/.dotfiles"

# Compilers
export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/sqlite/include"
export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/zlib/include"
export CPPFLAGS="${CPPFLAGS}-I/usr/local/opt/openssl/include"
export LDFLAGS="${LDFLAGS} -L/usr/local/opt/sqlite/lib"
export LDFLAGS="${LDFLAGS} -L/usr/local/opt/zlib/lib"
export LDFLAGS="${LDFLAGS}-L/usr/local/opt/openssl/lib"
export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/sqlite/lib/pkgconfig"
export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/zlib/lib/pkgconfig"

# Paths
PATH="/usr/local/bin:$PATH"
PATH="/usr/local/sbin:$PATH"
PATH="$HOME/.cargo/bin:$PATH"
PATH="$HOME/.dotfiles/bin:$PATH"

export XDG_CONFIG_HOME="$HOME/.config/"

# Switch between light/dark themes
if [ "$BACKGROUND" = "light" ]; then
  export THEME="base16-tomorrow"
  BACKGROUND=""
else
  export THEME="base16-tomorrow-night"
fi

# zsh Highlighters
export ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR=/usr/local/share/zsh-syntax-highlighting/highlighters

# rbenv
export RBENV_ROOT="$HOME/.rbenv/"

# nvm (Node Version Manager)
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm

# Pyenv
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# Man
export MANPATH="/usr/local/man:$MANPATH"

# Git HTTP Proxy with CURL
export GIT_CURL_VERBOSE="1"

# Required for mysql to compile correctly on snow leopard
export ARCHFLAGS="-arch x86_64"

# Fix 'macos sierra: [warn]: kq_init: detected broken kqueue; not using.'
export EVENT_NOKQUEUE=1

# Editors
export EDITOR="vim"
export CVSEDITOR="vim"
export SVN_EDITOR="vim"
export GIT_EDITOR="vim"
export VMAIL_VIM="vim"

# Pass extensions
export PASSWORD_STORE_ENABLE_EXTENSIONS=true
export PASSWORD_STORE_EXTENSIONS_DIR=/usr/local/lib/password-store/extensions

# npm-check-with-yarn
export NPM_CHECK_INSTALLER=yarn

# Highlight section titles in manual pages
export LESS_TERMCAP_md="$ORANGE"

# FZF
# export FZF_DEFAULT_COMMAND='ag -g ""'
# export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Exclude those directories even if not listed in .gitignore, or if .gitignore is missing
FD_OPTIONS="--follow --exclude .git --exclude node_modules"

# Change behavior of fzf dialogue
export FZF_DEFAULT_OPTS="--no-mouse --height 50% -1 --reverse --multi --inline-info --preview='[[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color=always {} || cat {}) 2> /dev/null | head -300' --preview-window='right:50%'"

# Change find backend
# Use 'git ls-files' when inside GIT repo, or fd otherwise
export FZF_DEFAULT_COMMAND="git ls-files --cached --others --exclude-standard | fd --type f --type l $FD_OPTIONS"

# Find commands for "Ctrl+T" and "Opt+C" shortcuts
export FZF_CTRL_T_COMMAND="fd $FD_OPTIONS"
export FZF_ALT_C_COMMAND="fd --type d $FD_OPTIONS"

export BAT_PAGER="less -R"

export PATH

unset USERNAME
