#################
### Functions ###
#################

# Set the background colors
function light() {
  BACKGROUND="light" && reload
}

function dark() {
  reload
}

function theme () {
  export THEME="$1"
  BASE16_SHELL="$DOTFILES/config/base16-shell/scripts/$THEME.sh"
  source $BASE16_SHELL
}

# Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm,
# and their installed packages
function update () {
  sudo softwareupdate -i -a
    brew update
    brew upgrade --all
    brew cleanup
    brew cask cleanup
    npm update npm -g
    npm update -g
    gem update --system
    gem update
}

# Incremental Search
function bind2maps () {
  local i sequence widget
  local -a maps

  while [[ "$1" != "--" ]]; do
      maps+=( "$1" )
      shift
  done
  shift

  if [[ "$1" == "-s" ]]; then
      shift
      sequence="$1"
  else
      sequence="${key[$1]}"
  fi
  widget="$2"

  [[ -z "$sequence" ]] && return 1

  for i in "${maps[@]}"; do
    bindkey -M "$i" "$sequence" "$widget"
  done
}

bind2maps emacs viins -- -s '^r' perform-history-action-backward
bind2maps emacs viins -- -s '^s' perform-history-action-forward
bindkey -M isearch "^r" history-incremental-pattern-search-backward
bindkey -M isearch "^s" history-incremental-pattern-search-forward

function perform-history-action-backward() {
  if (( ${#BUFFER} )); then
    zle history-substring-search-up
  else
    zle history-incremental-pattern-search-backward
  fi
}

function perform-history-action-forward() {
  if (( ${#BUFFER} )); then
    zle history-substring-search-down
  else
    zle history-incremental-pattern-search-forward
  fi
}

zle -N perform-history-action-backward
zle -N perform-history-action-forward

# Automove to folder without cd
setopt AUTO_CD

setopt no_complete_aliases

# Change into folder and show content
cdl() {
  cd $1; ls;
}

# Encode images in Base64
encodeBase64() {
  uuencode -m $1 /dev/stdout | sed '1d' | sed '$d'
}

# Create a data URL from a file
dataurl() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Server
server() {
  browser-sync start --server --files "**"
}

# Create a new directory and enter it
mkd() {
  mkdir -p "$@" && cd "$@"
}

# Determine size of a file or total size of a directory
fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
  function diff() {
  git diff --no-index --color-words "$@"
}
fi

# Escape UTF-8 characters into their 3-byte format
escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# Decode \x{ABCD}-style Unicode escape sequences
unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# Get a character’s Unicode code point
codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# Manually remove a downloaded app or file from the quarantine
unquarantine() {
  for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
    xattr -r -d "$attribute" "$@"
  done
}

# Compare original and gzipped file size
gz() {
  local origsize=$(wc -c < "$1")
  local gzipsize=$(gzip -c "$1" | wc -c)
  local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
  printf "orig: %d bytes\n" "$origsize"
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# Create folders/files in a row
mktouch() {
  if [ $# -lt 1 ]; then
    echo "Missing argument";
    return 1;
  fi

  for f in "$@"; do
    mkdir -p -- "$(dirname -- "$f")"
    touch -- "$f"
  done
}

# Auto change the nvm version based on a .nvmrc file based on the current directory. See https://github.com/creationix/nvm/issues/110#issuecomment-190125863
autoload -U add-zsh-hook
load-nvmrc() {
  if [[ -f .nvmrc && -r .nvmrc ]]; then
    nvm use
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc
